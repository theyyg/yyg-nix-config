' Yyg Custom PlantUML Configs and Shortcuts
' - This uses the plantuml "use case" style
'  https://github.com/theyyg/yyg-nix-config/tree/master/plantuml
'  patterned after the plant uml standard library https://plantuml.com/stdlib
'
' Download and install plantuml https://plantuml.com/download
' Install plantuml-mode via melpa
'
' To use in org mode:
'  First: Run these scripts in a scratch buffer or add to emacs config
'   Scratch:
'    (setq org-plantuml-jar-path (expand-file-name "/home/you/path/to/plantuml.jar"))
'    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
'    (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
'
'   .emacs.el:
'    (setq org-plantuml-jar-path (expand-file-name "/home/local/MAGICLEAP/bwood/bin/plantuml.jar"))
'
'    (org-babel-do-load-languages
'     'org-babel-load-languages
'     '((plantuml . t)))
'
'    (defun init-plantuml()
'      (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
'      (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
'      )
'
'    (add-hook 'org-mode-hook 'init-plantuml)
'
' Using PlantUML in org-mode
'  Create a plantuml source block:
'   #+begin_src plantuml :file ./chart-name.png
'   title Chart Title
'
'
'   #+end_src
'
'  Add the following line at the top of the org file to prevent evaluation prompts:
'  # -*- org-confirm-babel-evaluate: nil; -*-
'
' or add this sections to the bottom of the org file:
'
' * Local Variables :noexport:
' Local Variables:
' org-confirm-babel-evaluate: nil
' End:
'
'  Publish plant-uml in org doc by executing C-c C-e h o

!include yyg-colors.puml

' ================================
' Block
'
!unquoted procedure Block($e_alias, $e_label, $e_color=$bgLt)
entity "$e_label" as $e_alias $e_color
!endprocedure

!unquoted procedure CreateBlock($e_alias, $e_label, $e_color=$bgLt)
create entity "$e_label" as $e_alias $e_color
!endprocedure

' ================================
' Index (Element of a vector)
'
!unquoted procedure Index($e_alias, $e_label, $e_color=$border)
control "For Each \n $e_label" as $e_alias
!endprocedure

!unquoted procedure CreateIndex($e_alias, $e_label, $e_color=$border)
create control "For Each \n $e_label" as $e_alias
!endprocedure

' ================================
' Wrap
'
!unquoted procedure Wrap($e_name, $e_color=$bgLt)
box "$e_name" $e_color
!endprocedure

!unquoted procedure EndWrap()
end box
!endprocedure

' ================================
' Group
'
!unquoted procedure Group($e_name, $e_color=$bgLt)
group "$e_name" $e_color
!endprocedure

!unquoted procedure EndGroup()
end group
!endprocedure

' ================================
' Loop
'
!unquoted procedure Loop($name, $e_color=$bgLt)
loop "$name" $e_color
!endprocedure

!unquoted procedure EndLoop()
end loop
!endprocedure

' ================================
' Style
'
skinparam sequence {
  LifeLineBorderColor $border
  LifeLineBackgroundColor $bgLt

  ArrowColor black
}
'
' TODO: other sequence styles
'
' Delay
' Divider
' Message
' Reference
' Stereo
' Title

skinparam SequenceParticipant{
  BackgroundColor transparent
  BorderColor $border
  BorderThickness 1
  Shadowing false
}

skinparam SequenceBox{
  BackgroundColor transparent
  BorderColor white
  BorderThickness 0
  Shadowing false
}

skinparam SequenceGroup{
  BackgroundColor $frameBg1
  BodyBackgroundColor transparent
  BorderColor $border
  BorderThickness 0
  Shadowing false
}

skinparam Control{
  BackgroundColor transparent
  BorderColor $border
  BorderThickness 1
  Shadowing false
}

skinparam Entity{
  BackgroundColor transparent
  BorderColor $border
  BorderThickness 1
  Shadowing false
}


skinparam RoundCorner 25