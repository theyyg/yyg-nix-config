' Yyg Custom PlantUML Configs and Shortcuts
' - This uses the plantuml "use case" style
'  https://github.com/theyyg/yyg-nix-config/tree/master/plantuml
'  patterned after the plant uml standard library https://plantuml.com/stdlib
'
' Download and install plantuml https://plantuml.com/download
' Install plantuml-mode via melpa
'
' To use in org mode:
'  First: Run these scripts in a scratch buffer or add to emacs config
'   Scratch:
'    (setq org-plantuml-jar-path (expand-file-name "/home/you/path/to/plantuml.jar"))
'    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
'    (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
'
'   .emacs.el:
'    (setq org-plantuml-jar-path (expand-file-name "/home/you/path/to/plantuml.jar"))
'
'    (org-babel-do-load-languages
'     'org-babel-load-languages
'     '((plantuml . t)))
'
'    (defun init-plantuml()
'      (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
'      (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
'      )
'
'    (add-hook 'org-mode-hook 'init-plantuml)
'
' Using PlantUML in org-mode
'  Create a plantuml source block:
'   #+begin_src plantuml :file ./chart-name.png
'   title Chart Title
'
'
'   #+end_src
'
'  Add the following line at the top of the org file to prevent evaluation prompts:
'  # -*- org-confirm-babel-evaluate: nil; -*-
'
' or add this sections to the bottom of the org file:
'
' * Local Variables :noexport:
' Local Variables:
' org-confirm-babel-evaluate: nil
' End:
'
'  Publish plant-uml in org doc by executing C-c C-e h o



' ===================================================
' LOOK INTO EBNF ELEMENTS FOR SIGNAL FLOW DIAGRAMS
' ===================================================

!include yyg-colors.puml

' ================================
' Factory Function
'
!unquoted procedure Factory($style, $alias, $color=bg, $label="none", $ref="false", $shade="none")
!$cmd = $style + " "

!if ($label != "none")
!$cmd = $cmd + '"' + $label + '"' + " as " + $alias
!else
!$cmd = $cmd + '"' + $alias + '"' + " "
!endif


!if ($color != "transparent")

!$fullColor = %get_variable_value("$color")

!if ($shade == "light")
!$fullColor = %get_variable_value("$color + Lt")
!endif

!if ($shade == "dark")
!$fullColor = %get_variable_value("$color + Dk")
!endif

!$cmd = $cmd + ' ' + $fullColor

!endif


!if ($ref != "false")
!$cmd = $cmd + ";line.dashed"
!endif

!log $cmd
$cmd
!endprocedure

' ================================
' Block
'
!unquoted procedure Block($alias, $label="none", $bg=$bgDk)
Factory(rectangle, $alias, $bg, $label)
!endprocedure

' ================================
' Round (Ellipse)
'
!unquoted procedure Round($alias, $label="none", $bg=$bgDk)
Factory(storage, $alias, $bg, $label)
!endprocedure

' ================================
' Hex (Hexagon)
'
!unquoted procedure Hex($alias, $label="none", $bg=$bgDk)
Factory(hexagon, $alias, $bg, $label)
!endprocedure

' ================================
' Ref (Reference)
'
'
!unquoted procedure Ref($alias, $label="none", $bg=$bgDk)
Factory(rectangle, $alias, $bg, $label, "true", "none")
!endprocedure

' ================================
' System
'
'
!unquoted procedure System($alias, $label="none", $bg=$bgDk)
Factory(package, $alias, $bg, $label)
!endprocedure

' ================================
' Box (Black Box)
'
'
!unquoted procedure Box($alias, $label="none", $bg=$bgDk)
Factory(node, $alias, $bg, $label)
!endprocedure

' ================================
' Object
'
'
!unquoted procedure Object($alias, $label="none", $bg=$bgDk)
Factory(card, $alias, $bg, $label)
!endprocedure

' ================================
' Cloud
'
!unquoted procedure Cloud($alias, $label="none", $bg=$bgDk)
Factory(cloud, $alias, $bg, $label)
!endprocedure

' ================================
' Data
'
!unquoted procedure Data($alias, $label="none", $bg=$bgDk)
Factory(usecase, $alias, $bg, $label)
!endprocedure

' ================================
' DB - Database Container
'
!unquoted procedure Db($alias, $label="none", $bg=$bgDk)
Factory(database, $alias, $bg, $label)
!endprocedure

' ================================
' Note (File)
'
'
!unquoted procedure Note($alias, $label="none", $bg=$bgDk)
Factory(file, $alias, $bg, $label)
!endprocedure

' ================================
' Dir (Folder)
'
'
!unquoted procedure Dir($alias, $label="none", $bg=$bgDk)
Factory(folder, $alias, $bg, $label)
!endprocedure

' ================================
' Frame
'
'
!unquoted procedure Frame($alias, $label="none", $bg=$bgDk)
Factory(frame, $alias, $bg, $label)
!endprocedure

' ================================
' Algo (Algorithm)
'
'
!unquoted procedure Algo($alias, $label="none", $bg=$bgDk)
Factory(queue, $alias, $bg, $label)
!endprocedure

' ================================
' Buff (Double Buffer)
'
'
!unquoted procedure Buff($alias, $label="none", $bg=$bgDk)
Factory(collections, $alias, $bg, $label)
!endprocedure

' ================================
' Plugin
'
'
!unquoted procedure Plugin($alias, $label="none", $bg=$bgDk)
Factory(component, $alias, $bg, $label)
!endprocedure

' ================================
' User
'
'
!unquoted procedure User($alias, $label="none", $bg=$bgDk)
Factory(person, $alias, $bg, $label)
!endprocedure

' ================================
' Wrap
'
!unquoted procedure Pack($alias, $label="none", $bg=$bgLt)
Factory(package, $alias, $bg, $label)
!endprocedure

' Clear Wrap
!unquoted procedure Wrap($alias, $label="none")
Factory(package, $alias, transparent, $label)
!endprocedure

' ================================
' Layout Style
'
!$LAYOUT_TOP_DOWN = "top to bottom direction"
!$LAYOUT_LEFT_RIGHT = "left to right direction"

$LAYOUT_TOP_DOWN
'$LAYOUT_LEFT_RIGHT

skinparam line {
  'type polyline
  type ortho
}

skinparam ranksep 50
skinparam nodesep 50  

' ================================
' Package Style
'
skinparam package {
  Style Rectangle
  BackgroundColor transparent
  FontColor $fontLt
  BorderColor $borderDk
  BorderThickness 1
  shadowing false
  RoundCorner 25

  BackgroundColor<<App>> $bgLt
  BackgroundColor<<Plugin>> $bgPluginLt
  BackgroundColor<<Service>> $bgServiceLt
  BackgroundColor<<Cloud>> $bgCloudLt

  ArrowColor black

  sep 10
}

' ================================
' Rectangle Style
'
skinparam rectangle {
  BackgroundColor transparent
  FontColor $fontLt
  BorderColor $borderDk
  BorderThickness 1
  shadowing false
  RoundCorner 15

  ArrowColor black
}

' ================================
' Storage Style
'
skinparam storage {
  BackgroundColor transparent
  FontColor $fontLt
  BorderColor $borderDk
  BorderThickness 1
  shadowing false

  ArrowColor black
}

' ================================
' Usecase Style
'
skinparam usecase {
  BackgroundColor transparent
  FontColor $fontLt
  BorderColor $borderDk
  BorderThickness 1
  shadowing false

  ArrowColor black
}

' ================================
' Hexagon Style
'
skinparam hexagon {
  BackgroundColor transparent
  FontColor $fontLt
  BorderColor $borderDk
  BorderThickness 1
  shadowing false

  ArrowColor black
}

' ================================
' Node Style
'
skinparam node {
  BackgroundColor transparent
  FontColor $fontLt
  BorderColor $borderDk
  BorderThickness 1
  shadowing false

  ArrowColor black
}


' ================================
' Card Style
'
skinparam card {
  BackgroundColor transparent
  FontColor $fontLt
  BorderColor $borderDk
  BorderThickness 1
  shadowing false

  ArrowColor black
}

' ================================
' File Style
'
skinparam file {
  BackgroundColor transparent
  FontColor $fontLt
  BorderColor $borderDk
  BorderThickness 1
  shadowing false

  ArrowColor black
}

' ================================
' Folder Style
'
skinparam folder {
  BackgroundColor transparent
  FontColor $fontLt
  BorderColor $borderDk
  BorderThickness 1
  shadowing false

  ArrowColor black
}

' ================================
' Queue Style
'
skinparam queue {
  BackgroundColor transparent
  FontColor $fontLt
  BorderColor $borderDk
  BorderThickness 1
  shadowing false

  ArrowColor black
}

' ================================
' Person Style
'
skinparam person {
  BackgroundColor transparent
  FontColor $fontLt
  BorderColor $borderDk
  BorderThickness 1
  shadowing false

  ArrowColor black
}

' ================================
' Actor Style
'
skinparam actor {
  BackgroundColor transparent
  FontColor $fontLt
  BorderColor $borderDk
  BorderThickness 1
  shadowing false

  ArrowColor black
}

' ================================
' Database Style
'
skinparam Database {
  BackgroundColor transparent
  FontColor $fontLt
  BorderColor $borderDk
  BorderThickness 1
  shadowing false

  ArrowColor black
}

' ================================
' Cloud Style
'
skinparam cloud {
  BackgroundColor transparent
  FontColor $fontLt
  BorderColor $borderDk
  BorderThickness 1
  shadowing false

  ArrowColor black
}

' ================================
' Collections Style
'
skinparam collections {
  BackgroundColor transparent
  FontColor $fontLt
  BorderColor $borderDk
  BorderThickness 1
  shadowing false

  ArrowColor black
}

' ================================
' Component Style
'
skinparam component {
  BackgroundColor transparent
  FontColor $fontLt
  BorderColor $borderDk
  BorderThickness 1
  shadowing false

  ArrowColor black
}

' ================================
' Package Style
'
skinparam package {
  BackgroundColor transparent
  FontColor $fontLt
  BorderColor $borderDk
  BorderThickness 1
  shadowing false

  ArrowColor black
}

' ================================
' Frame Style
'
skinparam frame {
  BackgroundColor transparent
  FontColor $fontLt
  BorderColor $borderDk
  BorderThickness 1
  shadowing false

  ArrowColor black
}

skinparam arrow {
}

